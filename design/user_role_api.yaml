swagger: "2.0"
info:
  title: Roles api
  description: CRUD actions for roles and user' role management
  version: "1.0"
host: "localhost:8000"
basePath: /api/v1
produces:
  - "application/json"
consumes:
  - "application/json"

# *** Roles CRUD ***
paths:
  /role:
    get:
      tags: [ "role" ]
      summary: "Get list of roles"
      responses:
        "200":
          description: OK
          schema:
            properties:
              roles:
                type: array
                items:
                  $ref: '#/definitions/Role'

    post:
      tags: [ "role" ]
      summary: "Create role"
      operationId: "createRole"
      parameters:
        - in: "body"
          name: "body"
          description: "Created role object"
          required: true
          schema:
            $ref: "#/definitions/Role"
      responses:
        "200":
          description: "Role created"
        "400":
          description: "Invalid role name"
        "401":
          description: "Role with this name already exists"

  /role/{role_id}:
    put:
      tags: [ "role" ]
      summary: "Update an existing role"
      operationId: "updateRole"
      parameters:
        - in: "path"
          name: "role_id"
          required: true
          type: integer
          format: "int64"
        - name: "body"
          in: "body"
          description: "New name for the role and/or list of role's permission ids"
          required: true
          schema:
            properties:
              name:
                type: string
              permissions:
                type: array
                items:
                  type: integer
      responses:
        "200":
          description: OK
        "400":
          description: "Invalid role_id supplied"
        "404":
          description: "Role not found"
        "405":
          description: "Validation exception"

    delete:
      tags: ["role"]
      summary: "Delete role"
      operationId: "deleteRole"
      parameters:
        - name: "role_id"
          in: "path"
          description: "Role id to delete"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "400":
          description: "Invalid user ID supplied"
        "401":
          description: "Invalid role ID supplied"
        "404":
          description: "Role not found"



# *** user-roles ****

  /user/{user_id}/roles:
    # Parameter for each of the following methods
    parameters:
      - name: "user_id"
        in: "path"
        description: ID of the user
        required: true
        type: "integer"
        format: "int64"
    get:
      tags: [ "user-roles" ]
      summary: List roles the user is assigned to
      responses:
        "200":
          description: OK
          schema:
            properties:
              roles:
                type: array
                items:
                  $ref: '#/definitions/Role'
    post:
      tags: [ "user-roles" ]
      summary: "Assign user to a role"
      parameters:
        - name: "role_id"
          description: "ID of the role assigned to the user"
          required: true
          in: "body"
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
        "201":
          description: "The user is already assigned this role"
        "404":
          description: "User not found"
        "405":
          description: "Role not found"

    delete:
      tags: [ "user-roles" ]
      summary: "Remove role from user"
      parameters:
        - name: "role_id"
          description: "ID of the role removed from the user"
          required: true
          in: "body"
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
        "201":
          description: "User isn't assigned this role"
        "404":
          description: "User not found"
        "405":
          description: "Role not found"




  # Проверка наличия прав у пользователя.
  /user/{user_id}/can/{permission_id}:
    get:
      summary: "Check if user is granted particular permission"
      tags: ["user-permission"]
      parameters:
        - name: "user_id"
          in: "path"
          description: ID of the user
          required: true
          type: "integer"
          format: "int64"
        - name: "permission_id"
          in: "path"
          description: ID of the permission
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: 'Whether the user has the permission'
          schema:
            properties:
              can:
                type: boolean
        "404":
          description: "User not found"
        "405":
          description: "Permission not found"

















definitions:

  # User is a copy from users_api.yaml
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"

  Permission:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"

  Role:
    type: "object"
    description: совокупность прав, объединённых в одну сущность, привязанную к пользователям в системе. Например, может быть роль «менеджер контента», который имеет права на «создание новых фильмов» и «редактирование существующих фильмов».
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"

  UserRole:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      user:
        $ref: '#/definitions/User'
      permission:
        $ref: '#/definitions/Role'

  RolePermission:
    type: "object"
    description: Разрешённое действие/Право (Permission) — действие, которое имеет право сделать пользователь. Например, «создать новый фильм« или «редактировать существующий фильм».
    properties:
      id:
        type: "integer"
        format: "int64"
      user:
        $ref: '#/definitions/Role'
      permission:
        $ref: '#/definitions/Permission'
